# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import wire_pb2 as wire__pb2


class BidirectionalStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ServerSend = channel.unary_unary(
                '/bidirectional.Bidirectional/ServerSend',
                request_serializer=wire__pb2.Text.SerializeToString,
                response_deserializer=wire__pb2.Res.FromString,
                )
        self.ChangeAccountState = channel.unary_unary(
                '/bidirectional.Bidirectional/ChangeAccountState',
                request_serializer=wire__pb2.Account.SerializeToString,
                response_deserializer=wire__pb2.Res.FromString,
                )
        self.ClientStream = channel.unary_stream(
                '/bidirectional.Bidirectional/ClientStream',
                request_serializer=wire__pb2.Account.SerializeToString,
                response_deserializer=wire__pb2.Text.FromString,
                )
        self.ListAccounts = channel.unary_unary(
                '/bidirectional.Bidirectional/ListAccounts',
                request_serializer=wire__pb2.Query.SerializeToString,
                response_deserializer=wire__pb2.List.FromString,
                )


class BidirectionalServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ServerSend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeAccountState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClientStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAccounts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BidirectionalServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ServerSend': grpc.unary_unary_rpc_method_handler(
                    servicer.ServerSend,
                    request_deserializer=wire__pb2.Text.FromString,
                    response_serializer=wire__pb2.Res.SerializeToString,
            ),
            'ChangeAccountState': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeAccountState,
                    request_deserializer=wire__pb2.Account.FromString,
                    response_serializer=wire__pb2.Res.SerializeToString,
            ),
            'ClientStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ClientStream,
                    request_deserializer=wire__pb2.Account.FromString,
                    response_serializer=wire__pb2.Text.SerializeToString,
            ),
            'ListAccounts': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAccounts,
                    request_deserializer=wire__pb2.Query.FromString,
                    response_serializer=wire__pb2.List.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bidirectional.Bidirectional', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Bidirectional(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ServerSend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bidirectional.Bidirectional/ServerSend',
            wire__pb2.Text.SerializeToString,
            wire__pb2.Res.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChangeAccountState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bidirectional.Bidirectional/ChangeAccountState',
            wire__pb2.Account.SerializeToString,
            wire__pb2.Res.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClientStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/bidirectional.Bidirectional/ClientStream',
            wire__pb2.Account.SerializeToString,
            wire__pb2.Text.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAccounts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bidirectional.Bidirectional/ListAccounts',
            wire__pb2.Query.SerializeToString,
            wire__pb2.List.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
